buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://download.crashlytics.com/maven' }
    }

    dependencies {
        classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.9.+'
        classpath 'com.crashlytics.tools.gradle:crashlytics-gradle:1.+'
        classpath 'com.deploygate:gradle:0.6'
    }
}

File secretPropsFile = file('../secret.properties');
Properties secretProps = new Properties();

if(secretPropsFile.exists()) {
    secretProps.load(new FileInputStream(secretPropsFile))
}else{
    throw new InvalidUserDataException("Please make sure the API secrects file exists at '"+secretPropsFile.getAbsolutePath()+"'")
}

apply plugin: 'android-sdk-manager'
apply plugin: 'android'

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.1"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 19
        versionCode 3
        versionName "0.3"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    packagingOptions {
        exclude 'LICENSE.txt'
    }

    buildTypes {

        debug {
            versionNameSuffix "-DEBUG"
        }

        beta.initWith(debug)
        beta {
            versionNameSuffix "-BETA"
            packageNameSuffix ".beta"
        }

        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}


repositories {
    maven { url 'http://download.crashlytics.com/maven' }
}
dependencies {
    compile 'com.android.support:support-v4:+'
    compile 'junit:junit:3.+'
    compile 'com.jakewharton:butterknife:4.+'
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.crashlytics.android:crashlytics:1.+'

}

// Override Data in Manifest
android.applicationVariants.each { variant ->
    variant.processManifest.doLast {
        copy {
            // *** SET COPY PATHS ***
            try {
                from("${buildDir}/manifests") {
                    //println "from: ${buildDir}/manifests"
                    include "${variant.dirName}/AndroidManifest.xml"
                    //println "included: ${variant.dirName}/AndroidManifest.xml"
                }
            } catch (e) {
                println "error: " + e
            }

            into("${buildDir}/manifests/${variant.name}")

            filter {
                String line ->
                    line.replaceAll("CRASHLYTICS_API_KEY", secretProps.getProperty("de.stefanhoth.android.got2048.CRASHLYTICS_API_KEY"));
            }
        }
    }

    // *** SET PATH TO NEW MANIFEST ***
    variant.processResources.manifestFile = file("${buildDir}/manifests/${variant.name}/${variant.dirName}/AndroidManifest.xml")

    variant.processManifest.doLast {

        // STUPID  plugin checks for  API key and can't handle proper resource resolution
        // so we have to replace the key on the fly before activating it
        apply plugin: 'crashlytics'
    }
}

apply plugin: 'deploygate'

deploygate {
    userName = "stefanhoth"
    token = secretProps.getProperty("de.stefanhoth.android.got2048.DEPLOYGATE_TOKEN")

    apks {
        beta {
            sourceFile = file("build/apk/app-beta-unaligned.apk")

            def betaComment = secretProps.getProperty("de.stefanhoth.android.got2048.DEPLOYGATE_RELEASE_NOTES")
            if (betaComment.length() > 0) {
                releaseNote = betaComment
                message = betaComment
            }

            if(secretProps.hasProperty("de.stefanhoth.android.got2048.DEPLOYGATE_DISTRIBUTION_ID")) {
                distributionKey = secretProps.getProperty("de.stefanhoth.android.got2048.DEPLOYGATE_DISTRIBUTION_ID")
            }
        }
    }
}

def getReleaseNotes(flavor){

    return readLine('> Please enter the release notes for flavor ['+flavor+']: ')
}

def readLine(String format, Object... args) throws IOException {
    if (System.console() != null) {
        return System.console().readLine(format, args);
    }
    println(String.format(format, args))
    BufferedReader reader = new BufferedReader(new InputStreamReader(
            System.in));
    return reader.readLine();
}
